# -*- coding: utf-8 -*-
"""Credit_Card_Fraud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dTyyJW2_e3f-cjJ2WtBrhEUXSyISu7pQ
"""

Name- Kartik Nandu Gore

"""**Task 5**

#CREDIT CARD FRAUD DETECTION
"""

# 1. Import Libraries

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE


# 2. Load Dataset
# Upload file manually in Colab
from google.colab import files
uploaded = files.upload()

# Replace filename with your uploaded file name
df = pd.read_csv("creditcard.csv")

print("Dataset shape:", df.shape)
print(df.head())


# 3. Preprocessing
X = df.drop(columns=['Class'])
y = df['Class']

# Normalize 'Time' and 'Amount'
scaler = StandardScaler()
X[['Time', 'Amount']] = scaler.fit_transform(X[['Time', 'Amount']])

# Train-test split (stratified)
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Handle imbalance with SMOTE
smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(X_train, y_train)

print("Before SMOTE:", np.bincount(y_train))
print("After SMOTE:", np.bincount(y_train_res))


# 4. Train Models
# Logistic Regression
lr = LogisticRegression(max_iter=1000, solver='liblinear')
lr.fit(X_train_res, y_train_res)
y_pred_lr = lr.predict(X_test)

print("\nðŸ”¹ Logistic Regression Results")
print(classification_report(y_test, y_pred_lr, digits=4))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_lr))

# Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42, n_jobs=-1)
rf.fit(X_train_res, y_train_res)
y_pred_rf = rf.predict(X_test)

print("\nðŸ”¹ Random Forest Results")
print(classification_report(y_test, y_pred_rf, digits=4))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rf))