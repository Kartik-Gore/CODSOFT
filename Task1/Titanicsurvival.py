# -*- coding: utf-8 -*-
"""TitanicSurvival.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ErYEQPC1WwCo9Q_eqqFxkfxu6loyLSCZ

Name - Kartik Nandu Gore

**Task-1 **
# Titanic Survival Prediction
"""

# Upload the dataset
from google.colab import files
uploaded = files.upload()

# Loads the Liberies
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the dataset
df = pd.read_csv('Titanic-Dataset.csv')

#Explore the Data
df.info()
df.describe()
df.isnull().sum()

"""Data Cleaning

"""

# Fill missing Age values with the median
df['Age'].fillna(df['Age'].median(), inplace=True)

# Fill missing Embarked values with the most common value
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)

# Drop Cabin (too many missing values)
df.drop('Cabin', axis=1, inplace=True)

"""Encode Categorical Features

"""

le = LabelEncoder()
df['Sex'] = le.fit_transform(df['Sex'])        # male:1, female:0
df['Embarked'] = le.fit_transform(df['Embarked'])

# Drop irrelevant columns
df.drop(['Name', 'Ticket', 'PassengerId'], axis=1, inplace=True)

"""Train-Test Split

"""

X = df.drop('Survived', axis=1)
y = df['Survived']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Train the Model"""

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

"""# Evaluate the Model"""

y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""Feature Importance"""

feature_importances = pd.Series(model.feature_importances_, index=X.columns)
feature_importances.sort_values().plot(kind='barh')
plt.title('Feature Importance')
plt.show()

"""Survival Count Plot

"""

sns.countplot(x='Survived', data=df)
plt.title('Survival Count')
plt.xticks([0, 1], ['Not Survived', 'Survived'])
plt.show()

"""Survival by Gender"""

sns.countplot(x='Sex', hue='Survived', data=df)
plt.title('Survival by Sex')
plt.legend(labels=['Not Survived', 'Survived'])
plt.show()

"""Correlation Heatmap"""

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

"""Survival Rate by Age Groups and Gender"""

df['AgeGroup'] = pd.cut(df['Age'], bins=[0, 12, 20, 40, 60, 80], labels=['Child', 'Teen', 'Adult', 'Mid-age', 'Senior'])

sns.catplot(x='AgeGroup', hue='Survived', col='Sex', data=df, kind='count', height=5, aspect=1)
plt.subplots_adjust(top=0.8)
plt.suptitle('Survival by Age Group and Gender')
plt.show()

"""Age Distribution by Class and Survival"""

plt.figure(figsize=(12, 6))
sns.violinplot(data=df, x='Pclass', y='Age', hue='Survived', split=True, palette='muted')
plt.title('Age Distribution by Class and Survival')
plt.show()