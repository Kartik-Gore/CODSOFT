# -*- coding: utf-8 -*-
"""Iris_Flower.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tk9YPPyy_B5c_tQ-AQ52XZlb_N8THUK6

Name- Kartik Nandu Gore

**Task- 3**
#  IRIS FLOWER CLASSIFICATION
"""

# Upload the dataset
from google.colab import files
uploaded = files.upload()

# Step 1: Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Step 2: Load dataset from CSV
df = pd.read_csv("/content/IRIS.csv")  # In Colab, upload via left panel or files.upload()

# Step 3: Quick look at the data
print(df.head())
print(df.info())
print(df['species'].value_counts())

# Step 4: Data Visualization
sns.pairplot(df, hue="species")
plt.show()

plt.figure(figsize=(8, 5))
sns.heatmap(df.drop('species', axis=1).corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlation")
plt.show()

# Step 5: Split features & target
X = df.drop('species', axis=1)
y = df['species']

# Step 6: Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Step 7: Feature scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Step 8: Train Logistic Regression model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# Step 9: Predictions
y_pred = model.predict(X_test)

# Step 10: Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=df['species'].unique(), yticklabels=df['species'].unique())
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()